import wx, gVar
import fetchodbc   as fetch
import loadCmbODBC as loadCmb

from datetime          import date
from DateCtrl          import DateCtrl
#from panel_guardian    import guardian_data

tab_selected   = 'white'
tab_unselected = 'grey'

class cSiswaDetails(wx.Panel):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        tc = []
        
        self.panel_l = wx.Panel(self, -1)
        self.panel_r = wx.Panel(self, -1)
        
        self.panel_top     = wx.Panel(self, -1)
        self.panel_panels  = wx.Panel(self, -1)
        
        self.button_back   = wx.Button(    self.panel_top, -1, "< Back")
        self.pcs1          = wx.StaticText(self.panel_top, -1, "")
        self.button_save   = wx.Button(    self.panel_top, -1, "Save")
        self.button_edit   = wx.Button(    self.panel_top, -1, "Edit")
        
        self.panel_tabs       = wx.Panel(self.panel_panels, -1)
  
        self.button_biodata   = wx.Button(self.panel_tabs, -1, 'Biodata',   style=wx.NO_BORDER)
        self.button_education = wx.Button(self.panel_tabs, -1, 'Education', style=wx.NO_BORDER)
        self.button_medical   = wx.Button(self.panel_tabs, -1, 'Medical',   style=wx.NO_BORDER)
        self.button_fees      = wx.Button(self.panel_tabs, -1, 'Fees',      style=wx.NO_BORDER)
        self.button_contacts  = wx.Button(self.panel_tabs, -1, 'Contacts',  style=wx.NO_BORDER)
        
        self.pane_biodata     = wx.Panel(self.panel_panels, -1)
        self.pane_education   = wx.Panel(self.panel_panels, -1)
        self.pane_medical     = wx.Panel(self.panel_panels, -1)
        self.pane_fees        = wx.Panel(self.panel_panels, -1)
        self.pane_contacts    = wx.ScrolledWindow(self.panel_panels, -1)
        
        self.panel_bio        = wx.Panel(self.pane_biodata, -1)
        self.panel_siblings   = wx.Panel(self.pane_biodata, -1)
        self.panel_address    = wx.Panel(self.pane_biodata, -1)
        self.panel_telp       = wx.Panel(self.pane_biodata, -1)
        
        self.panel_sib_base   = wx.Panel(self.panel_siblings, -1)
        self.panel_education  = wx.Panel(self.pane_education, -1)

        self.panel_bio2       = wx.Panel(self.panel_bio,  -1)
        
        self.label_name       = wx.StaticText(self.panel_bio2, -1, "Name")
        self.text_ctrl_student_name = wx.TextCtrl(self.panel_bio2,   -1, "")
        tc.append(self.text_ctrl_student_name)
        
        self.labelbirthplace  = wx.StaticText(self.panel_bio2, -1, "Birthplace")
        self.choice_pob       = wx.Choice(self.panel_bio2,     -1, choices=[])
        #self.choice_pob      = wx.TextCtrl(self.panel_bio2,    -1, "")
        
        self.label_faith      = wx.StaticText(self.panel_bio2, -1, "Faith")
        self.choice_faith     = wx.Choice(self.panel_bio2,   -1, choices=["Buddhist", "Muslim", "Christian", "Hindu", "Other"])
        
        self.label_gender     = wx.StaticText(self.panel_bio2, -1, "Gender")
        self.choice_gender    = wx.Choice(self.panel_bio2,     -1, choices=[])
        
        self.label_dob        = wx.StaticText(self.panel_bio2, -1, "Date of birth")
        self.data_dob         = DateCtrl(self.panel_bio2, -1)
        
        self.label_residence  = wx.StaticText(self.panel_bio2, -1, "Residence")
        self.choice_residence = wx.Choice(self.panel_bio2,     -1, choices=["With Father", "With Mother", "With Guardian", "With Other"])
        
        self.label_sib_birth         = wx.StaticText(self.panel_sib_base , -1, "birth")
        self.choice_sibling_by_birth = wx.Choice(self.panel_sib_base ,     -1, choices=['1','2','3','4','5'])
        
        self.label_sib_step      = wx.StaticText(self.panel_sib_base , -1, "step")
        self.choice_sibling_step = wx.Choice(self.panel_sib_base ,     -1, choices=['1','2','3','4','5'])
        
        self.label_sib_adopted   = wx.StaticText(self.panel_sib_base , -1, "adopted")
        self.choice_sib_adopted  = wx.Choice(self.panel_sib_base ,     -1, choices=['1','2','3','4','5'])
        
        self.label_childNo       = wx.StaticText(self.panel_sib_base , -1, "Child #")
        self.choice_birth_order  = wx.Choice(self.panel_sib_base ,     -1, choices=['1','2','3','4','5'])
        
        self.label_status        = wx.StaticText(self.panel_sib_base , -1, "Status")
        self.choice_status       = wx.Choice(self.panel_sib_base ,     -1, choices=['Natural', 'Adopted'])
        
        self.label_previous_school   = wx.StaticText(self.panel_education, -1, "Previous school")
        self.choice_school           = wx.Choice(self.panel_education,   -1, choices=[])
        
        self.label_Current_status    = wx.StaticText(self.panel_education, -1, "Current status")
        self.data_current_edu_status = wx.TextCtrl(self.panel_education,   -1, "")
        tc.append(self.data_current_edu_status)
                  
        self.label_edu_notes     = wx.StaticText(self.pane_education, -1, "Notes:")
        self.data_edu_notes      = wx.TextCtrl(self.pane_education,   -1, "")
        tc.append(self.data_edu_notes)
                  
        #self.panel_blood        = wx.Panel(self.pane_medical,     -1)
        self.label_blood_group   = wx.StaticText(self.pane_medical, -1, "Blood group")
        self.choice_blood_group  = wx.Choice(self.pane_medical,     -1, choices=[])
        
        self.label_medical_notes = wx.StaticText(self.pane_medical,  -1, "Notes:")
        self.data_medical_notes  = wx.TextCtrl(self.pane_medical,    -1, "", style = wx.LB_MULTIPLE)
        tc.append(self.data_medical_notes)

        self.static_line_1 = wx.StaticLine(self.panel_sib_base, -1)
        self.static_line_2 = wx.StaticLine(self.panel_sib_base, -1)

        self.sizer_bio_static_staticbox   = wx.StaticBox(self.panel_bio,      -1, " ")
        self.sizer_student_sibs_staticbox = wx.StaticBox(self.panel_siblings, -1, "Siblings")

        self.panes =[self.pane_biodata,  self.pane_education, self.pane_medical, self.pane_fees, self.pane_contacts]
       
        self.text_ctrls   = tc 
        
        self.choice_ctrls = [self.choice_pob,   self.choice_birth_order,      self.choice_blood_group,
                            self.choice_faith,  self.choice_gender,           self.choice_residence,
                            self.choice_school, self.choice_sibling_by_birth, self.choice_sibling_step,
                            self.choice_sib_adopted, self.choice_status]

        self.tabs =[self.button_biodata, self.button_education, self.button_medical, self.button_contacts, self.button_fees]
        
        self.Bind(wx.EVT_BUTTON, self.OnBack,     self.button_back)
        self.Bind(wx.EVT_BUTTON, self.OnEdit,     self.button_edit)
        self.Bind(wx.EVT_BUTTON, self.OnSave,     self.button_save)
        
        self.Bind(wx.EVT_BUTTON, self.OnBio,      self.button_biodata)
        self.Bind(wx.EVT_BUTTON, self.OnEdu,      self.button_education)
        self.Bind(wx.EVT_BUTTON, self.OnMedical,  self.button_medical)
        self.Bind(wx.EVT_BUTTON, self.OnContacts, self.button_contacts)
        self.Bind(wx.EVT_BUTTON, self.OnFees,     self.button_fees)
        
        self.__set_properties()
        self.__do_layout()
        self.__do_main()
    
    def __set_properties(self):
        for tab in self.tabs:
            tab.SetWindowStyle(style=wx.NO_BORDER)
            tab.SetBackgroundColour(tab_unselected)
            
        self.button_biodata.SetBackgroundColour(tab_selected)
        
        for pane in self.panes:
            pane.SetBackgroundColour('white')
            pane.Hide()
        self.panel_panels.SetBackgroundColour('white')
            
        self.pane_biodata.Show()
            
        self.pcs1.SetMinSize((150, -1))
        self.pane_contacts.SetScrollRate(10, 10)
        self.text_ctrl_student_name.SetMinSize((200, -1))
        self.choice_sibling_by_birth.SetMinSize((50, -1))
        for txtctrl in self.text_ctrls:
            pass# txtctrl.SetEditable(False)
        self.Refresh()

    def __do_layout(self):
        sizer_base    = wx.BoxSizer(wx.HORIZONTAL)
        
        sizer_main     = wx.BoxSizer(wx.VERTICAL)
        sizer_btns     = wx.BoxSizer(wx.HORIZONTAL)
        sizer_panels   = wx.BoxSizer(wx.VERTICAL)
        sizer_tabs     = wx.BoxSizer(wx.HORIZONTAL)
        
        sizer_main     = wx.BoxSizer(wx.VERTICAL)
        sizer_medical  = wx.BoxSizer(wx.VERTICAL)
        sizer_edu      = wx.BoxSizer(wx.VERTICAL)
        sizer_contacts = wx.BoxSizer(wx.VERTICAL)
        
        # make sizer_contacts public in order to add contacts panels later
        self.sizer_contacts = sizer_contacts
        self.pane_contacts.SetSizer(self.sizer_contacts)
        
        sizer_btns.Add(self.button_back, 0, wx.LEFT, 0)
        sizer_btns.Add(self.pcs1,        1, wx.EXPAND, 0)
        sizer_btns.Add(self.button_save, 0, wx.ALIGN_RIGHT, 10)
        sizer_btns.Add(self.button_edit, 0, wx.ALIGN_RIGHT, 10)
        self.panel_top.SetSizer(sizer_btns)
        
        for t in self.tabs:
            sizer_tabs.Add(t, 0, wx.RIGHT, 2)
        self.panel_tabs.SetSizer(sizer_tabs)
     
        grid_sizer_edu         = wx.FlexGridSizer(2, 2, 5, 5)
        grid_sizer_student     = wx.FlexGridSizer(1, 2, 5, 5)
        grid_sizer_student_bio = wx.FlexGridSizer(8, 2, 5, 5)
        
        self.sizer_student_sibs_staticbox.Lower()
        sizer_student_sibs_static = wx.StaticBoxSizer(self.sizer_student_sibs_staticbox, wx.VERTICAL)
        sizer_student_siblings    = wx.FlexGridSizer(6, 2, 2, 0)
        
        self.sizer_bio_static_staticbox.Lower()
        sizer_bio_static          = wx.StaticBoxSizer(self.sizer_bio_static_staticbox, wx.VERTICAL)
        
        grid_sizer_student_bio.Add(self.label_name, 0, 0, 0)
        grid_sizer_student_bio.Add(self.text_ctrl_student_name,  0, wx.EXPAND, 0)
        
        grid_sizer_student_bio.Add(self.label_dob, 0, 0, 0)
        grid_sizer_student_bio.Add(self.data_dob,  0, wx.EXPAND, 0)
        
        grid_sizer_student_bio.Add(self.label_faith,  0, 0, 0)
        grid_sizer_student_bio.Add(self.choice_faith, 0, wx.EXPAND, 0)
        
        grid_sizer_student_bio.Add(self.label_gender,  0, 0, 0)
        grid_sizer_student_bio.Add(self.choice_gender, 0, wx.EXPAND, 0)
        
        grid_sizer_student_bio.Add(self.labelbirthplace, 0, 0, 0)
        grid_sizer_student_bio.Add(self.choice_pob,      0, wx.EXPAND, 0)
        
        grid_sizer_student_bio.Add(self.label_residence,  0, 0, 0)
        grid_sizer_student_bio.Add(self.choice_residence, 0, wx.EXPAND, 0)
        
        self.panel_bio2.SetSizer(grid_sizer_student_bio)
        
        sizer_bio_static.Add(self.panel_bio2, 1, wx.EXPAND, 0)
        self.panel_bio.SetSizer(sizer_bio_static)
        
        sizer_student_siblings.Add(self.label_sib_birth,         0, 0, 0)
        sizer_student_siblings.Add(self.choice_sibling_by_birth, 0, 0, 0)
        sizer_student_siblings.Add(self.label_sib_step,          0, 0, 0)
        sizer_student_siblings.Add(self.choice_sibling_step,     0, 0, 0)
        sizer_student_siblings.Add(self.label_sib_adopted,       0, 0, 0)
        sizer_student_siblings.Add(self.choice_sib_adopted,      0, 0, 0)
        sizer_student_siblings.Add(self.static_line_1,      0, wx.TOP | wx.BOTTOM | wx.EXPAND, 6)
        sizer_student_siblings.Add(self.static_line_2,      0, wx.TOP | wx.BOTTOM | wx.EXPAND, 6)
        sizer_student_siblings.Add(self.label_childNo,      0, 0, 0)
        sizer_student_siblings.Add(self.choice_birth_order, 0, 0, 0)
        sizer_student_siblings.Add(self.label_status,       0, 0, 0)
        sizer_student_siblings.Add(self.choice_status,      0, 0, 0)
        self.panel_sib_base .SetSizer(sizer_student_siblings)
        
        sizer_student_sibs_static.Add(self.panel_sib_base , 1, wx.EXPAND, 0)
        self.panel_siblings.SetSizer(sizer_student_sibs_static)
        
        grid_sizer_student.Add(self.panel_bio,      0, wx.EXPAND, 0)
        grid_sizer_student.Add(self.panel_siblings, 0, wx.EXPAND, 0)
        self.pane_biodata.SetSizer(grid_sizer_student)
        
        grid_sizer_edu.Add(self.label_previous_school,   0, 0, 0)
        grid_sizer_edu.Add(self.choice_school,           0, 0, 0)
        grid_sizer_edu.Add(self.label_Current_status,    0, 0, 0)
        grid_sizer_edu.Add(self.data_current_edu_status, 0, 0, 0)
        self.panel_education.SetSizer(grid_sizer_edu)
        
        sizer_edu.Add(self.panel_education, 0, wx.EXPAND, 0)
        sizer_edu.Add(self.label_edu_notes, 0, wx.TOP, 8)
        sizer_edu.Add(self.data_edu_notes,  1,  wx.EXPAND, 0)
        self.pane_education.SetSizer(sizer_edu)
        
        ##sizer_blood.Add(self.label_blood_group, 0, 0, 0)
        #sizer_blood.Add(self.choice_blood_group, 0, 0, 0)
        #self.panel_blood.SetSizer(sizer_blood)
        
        #sizer_medical.Add(self.panel_blood,      0, wx.TOP, 6)
        
        sizer_medical.Add(self.label_blood_group,   0, 0, 0)
        sizer_medical.Add(self.choice_blood_group,  0, 0, 0)
        sizer_medical.Add(self.label_medical_notes, 0, wx.TOP, 6)
        sizer_medical.Add(self.data_medical_notes,  1, wx.EXPAND, 0)
        self.pane_medical.SetSizer(sizer_medical)

        sizer_panels.Add(self.panel_tabs, 0 , 0, 0)
        for pane in self.panes:
            sizer_panels.Add(pane,        1, wx.TOP | wx.EXPAND, 10)
        self.panel_panels.SetSizer(sizer_panels)
        
        sizer_main.Add(self.panel_top,    0 ,0 ,0)
        sizer_main.Add(self.panel_panels, 1 , wx.ALL | wx.EXPAND, 10)
        self.panel_l.SetSizer(sizer_main)
        
        sizer_base.Add(self.panel_l, 1, wx.EXPAND | wx.LEFT, 15)
        sizer_base.Add(self.panel_r, 1 ,0, 0)
        self.SetSizer(sizer_base)
        
        self.Layout()
        
    def __do_main(self):
        loadCmb.gender(self.choice_gender)
    
    def displayData(self):
        self.student_id = student_id = gVar.student_id
        print 'panel_cSiswa_details : displayData' , student_id
        return
    
    
        self.clearCtrls()
        
        if not student_id:
            print "no id"
        

        student_details = fetch.cSiswaDetails(student_id)

        if not student_details:
            print 'not details found'
            return
        
        name = student_details['Nama']
        x  = str(student_details['TgLahir'])
        dob              = x.split(' ')[0]
   
        ailment          = ''#str(student_details['student_ailment'])
        faith_id         = student_details['Agama']
        
        previous_school_id = student_details['KSekolahAsal']
        
        birth_place      = str(student_details['TempatLahir'])
        edu_status       = ''     # ??? is this still needed
        edu_notes        = ''    # ??? seperate quiry on  table "edu_notes"
 
        blood_group_id   = str(student_details['GolDarah'])
        blood_group      = ''#fetch.bloodGroup(blood_group_id)
        
        siblings_birth    = student_details['SaudaraKandung']
        siblings_step     = student_details['SaudaraTiri']
        siblings_adopted  = student_details['SaudaraAngkat']
        
        
        if not siblings_birth: siblings_birth = 0
        if not siblings_step: siblings_step = 0
        if not siblings_adopted: siblings_adopted = 0
        birth_order = student_details['AnakKe']
        if not birth_order:   birth_order = 1
        
        if student_details['Pria']:
            self.choice_gender.SetSelection(0)
        else:
            self.choice_gender.SetSelection(1)
        
        self.text_ctrl_student_name.SetValue(name)
        
        self.data_current_edu_status.SetValue(edu_status)
        self.data_edu_notes.SetValue(edu_notes)
        self.data_medical_notes.SetValue(ailment)
        
        self.choice_sibling_by_birth.SetSelection(siblings_birth)
        self.choice_sibling_step.SetSelection(siblings_step)
        self.choice_sib_adopted.SetSelection(siblings_adopted)
        self.choice_birth_order.SetSelection(birth_order-1)

        previous_school = fetch.schoolName(previous_school_id)
        
        
        loadCmb.restore(self.choice_faith, faith_id)
        loadCmb.restore_str(self.choice_pob, birth_place)
        
        loadCmb.restore(self.choice_school, previous_school_id)
        
        loadCmb.restore(self.choice_blood_group, blood_group)
        
        sql = "SELECT KOrangTua, KWali \
                     FROM CSiswa \
                    WHERE Kode = %d" % int(student_id)
        details = fetch.getOneDict(sql)

        if not details:
            return
        KOrangTua =  details['KOrangTua']
        KWali     =  details['KWali']
        add = 0
    
        print ' cSiswa Details until here ok '    
        return
    
        if KOrangTua:
            sql = "SELECT NamaA, NamaI FROM OrangTua \
                    WHERE Kode = %d" % int(KOrangTua)
            
            details = fetch.getOneDict(sql)
            print sql, " : ", details
            
            if details:
                if details['NamaA']:
                    #print details['NamaA']
                    p=self.OnAddGuardian(wx.Event)
                    p.head('FATHER')
                    #p.labelHead.SetBackgroundColour((255, 200, 255))
                    p.displayData(student_id, KOrangTua, 'father')
                    add +=1
                if details['NamaI']:
                    #print details['NamaI']
                    p=self.OnAddGuardian(wx.Event)
                    p.head('MOTHER')
                    #p.labelHead.SetBackgroundColour((255, 255, 200))
                    p.displayData(student_id, KOrangTua, 'mother')
                    add +=1 
        if KWali:
            sql = "SELECT * FROM Wali \
                WHERE Kode = %d" % int(KWali)
            details = fetch.getOneDict(sql)
            #print sql, details
            p = self.OnAddGuardian()
            p.head('GUARDIAN')
            #p.labelHead.SetBackgroundColour((200, 255, 255))
            p.displayData(student_id, KWali, 'guardian')
            add +=1
            
        txt = 'added %d panels' %  add
            
        print txt  
        #self.Layout()
        
    def OnAddGuardian(self, evt=wx.Event):
        return
        print 'add guardian'
        p = guardian_data(self.pane_contacts, -1)
        #self.contacts.append(p)
        self.sizer_contacts.Add(p, 1, wx.EXPAND, 0)
        self.Layout()
        return p
    
    def clearCtrls(self):
        self.sizer_contacts.Clear()
        for ctrl in self.text_ctrls:
            ctrl.SetLabel('')
            
        for ctrl in self.choice_ctrls:
            ctrl.SetSelection(0)
            
        loadCmb.faiths(self.choice_faith)
        loadCmb.pob(self.choice_pob)
        loadCmb.blood(self.choice_blood_group)
        loadCmb.schools(self.choice_school)
        
            
        self.disable_ctrls()
            
    def enableCtrls(self, state = True):
        for ctrl in self.text_ctrls:
            ctrl.SetEditable(True)
            
        for ctrl in self.choice_ctrls:
            ctrl.Enable(True)
        
    def disable_ctrls(self):
        for ctrl in self.text_ctrls:
            ctrl.SetEditable(False)
            
        for ctrl in self.choice_ctrls:
            ctrl.Enable(False)
    
    def OnBack(self, evt):
        print 'back'
        self.GetTopLevelParent().goBack()
        
    def OnEdit(self, evt):
        if self.button_edit.GetLabelText()=='Cancel':
            print 'Cancel'
            self.button_edit.SetLabelText('Edit')
            self.enableCtrls(False)
            self.button_save.Hide()
        else:
            self.enableCtrls()
            
            if gVar.student_id:
                self.data_dob.Disable()
                self.text_ctrl_student_name.SetEditable(False)
                self.choice_gender.Disable()
        
            self.button_edit.SetLabelText('Cancel')
            self.button_save.Show()
        self.Layout()

    def OnSave(self, evt):
        pass

    def OnBio(self, evt):
        self.showPane(self.pane_biodata, self.button_biodata)
        
    def OnEdu(self, evt):
        self.showPane(self.pane_education, self.button_education)
        
    def OnMedical(self, evt):
        self.showPane(self.pane_medical, self.button_medical)
        
    def OnContacts(self, evt):
        self.showPane(self.pane_contacts, self.button_contacts)
        
    def OnFees(self, evt):
        self.showPane(self.pane_fees, self.button_fees)
        
    def showPane(self, pane, btn):
        for b in self.tabs:
            b.SetBackgroundColour(tab_unselected)
        btn.SetBackgroundColour(tab_selected)
        for p in self.panes:
            p.Hide()
        pane.Show()
        
        for d in self.text_ctrls:
            d.SetFocus()
            
        self.Layout()

        
        
        #self.GetTopLevelParent().goTo('edit_booking_student_details')
        
